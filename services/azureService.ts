import { AzureTask, AzureConfig } from '../types';

/**
 * Sends a task to the Azure DevOps API to create a work item.
 * @param task The task object generated by the AI.
 * @param config The Azure DevOps configuration containing org, project, and PAT.
 * @returns The JSON response from the Azure DevOps API.
 */
export async function sendTaskToAzure(task: AzureTask, config: AzureConfig): Promise<any> {
  const { organization, project, pat } = config;

  if (!organization || !project || !pat) {
    throw new Error("Azure DevOps configuration is incomplete.");
  }

  // Azure DevOps API uses the work item type with a '$' prefix in the URL
  const url = `https://dev.azure.com/${organization}/${project}/_apis/wit/workitems/$${task.type}?api-version=7.1-preview.3`;

  // The body for the API call must be a JSON Patch document.
  const body = [
    {
      "op": "add",
      "path": "/fields/System.Title",
      "value": task.title
    },
    {
      "op": "add",
      "path": "/fields/System.Description",
      "value": task.description.replace(/\n/g, '<br>') // Descriptions in Azure DevOps often use HTML for line breaks
    },
    {
      "op": "add",
      "path": "/fields/System.Tags",
      "value": task.tags.join(';')
    }
  ];

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json-patch+json',
      // The PAT is used in a Basic Authorization header. 
      // The username is empty, and the PAT is the password.
      'Authorization': 'Basic ' + btoa(':' + pat)
    },
    body: JSON.stringify(body)
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("Azure API Error:", errorData);
    // Provide a more user-friendly error message
    const message = errorData.message || `Request failed with status ${response.status}. Check your PAT permissions and configuration.`;
    throw new Error(message);
  }

  return await response.json();
}
